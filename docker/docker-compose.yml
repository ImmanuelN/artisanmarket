version: '3.8'

services:
  # Frontend React Application
  client:
    build:
      context: ./client
      dockerfile: ../docker/Dockerfile.client
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:5000/api
      - REACT_APP_SOCKET_URL=http://localhost:5000
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - server
    networks:
      - artisan-network

  # Backend Node.js Application
  server:
    build:
      context: ./server
      dockerfile: ../docker/Dockerfile.server
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://mongo:27017/artisanmarket
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-for-development
      - CLIENT_URL=http://localhost:3000
      - STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
      - CLOUDINARY_CLOUD_NAME=your-cloud-name
      - CLOUDINARY_API_KEY=your-api-key
      - CLOUDINARY_API_SECRET=your-api-secret
    volumes:
      - ./server:/app
      - /app/node_modules
      - ./server/uploads:/app/uploads
    depends_on:
      - mongo
      - redis
    networks:
      - artisan-network

  # MongoDB Database
  mongo:
    image: mongo:7.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=artisanmarket
    volumes:
      - mongo_data:/data/db
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - artisan-network

  # Redis for Caching and Sessions
  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - artisan-network

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - client
      - server
    networks:
      - artisan-network
    profiles:
      - production

  # Elasticsearch for Search (optional)
  elasticsearch:
    image: elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - artisan-network
    profiles:
      - search

volumes:
  mongo_data:
  redis_data:
  elasticsearch_data:

networks:
  artisan-network:
    driver: bridge
